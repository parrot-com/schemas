// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parrotschemas/events_monitoring/v1/events.proto

package com.parrothq.events_monitoring.v1;

public interface EventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:parrotschemas.events_monitoring.v1.Event)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.parrotschemas.events_monitoring.v1.Header header = 1;</code>
   * @return Whether the header field is set.
   */
  boolean hasHeader();
  /**
   * <code>.parrotschemas.events_monitoring.v1.Header header = 1;</code>
   * @return The header.
   */
  com.parrothq.events_monitoring.v1.Header getHeader();
  /**
   * <code>.parrotschemas.events_monitoring.v1.Header header = 1;</code>
   */
  com.parrothq.events_monitoring.v1.HeaderOrBuilder getHeaderOrBuilder();

  /**
   * <code>.google.protobuf.Any spec = 2;</code>
   * @return Whether the spec field is set.
   */
  boolean hasSpec();
  /**
   * <code>.google.protobuf.Any spec = 2;</code>
   * @return The spec.
   */
  com.google.protobuf.Any getSpec();
  /**
   * <code>.google.protobuf.Any spec = 2;</code>
   */
  com.google.protobuf.AnyOrBuilder getSpecOrBuilder();

  /**
   * <pre>
   * Type of this event (Normal, Error), new types could be added in the future.
   * </pre>
   *
   * <code>.parrotschemas.events_monitoring.v1.EventType type = 3;</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * Type of this event (Normal, Error), new types could be added in the future.
   * </pre>
   *
   * <code>.parrotschemas.events_monitoring.v1.EventType type = 3;</code>
   * @return The type.
   */
  com.parrothq.events_monitoring.v1.EventType getType();
}
